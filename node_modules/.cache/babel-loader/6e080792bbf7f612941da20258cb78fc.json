{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable eqeqeq */\n// import { Time } from \"tone\";\nexport class HiHat {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.ratios = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.oscEnvelope = void 0;\n    this.bndPass = void 0;\n    this.hipass = void 0;\n    this.volume = void 0;\n    this.fxAmount = void 0;\n    this.panner = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = amount;\n    };\n\n    this.ctx = ctx;\n    this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 0.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  setup() {\n    const k = this.fxAmount / 100;\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = \"bandpass\";\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.panner = this.ctx.createStereoPanner();\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.panner);\n    this.panner.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n\n    this.setup();\n    this.panner.pan.value = Math.cos(time * 4) * this.fxAmount / 100;\n    this.ratios.forEach(ratio => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\";\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/testfinal/my-app/src/engines/hat.ts"],"names":["HiHat","constructor","ctx","ratios","tone","decay","oscEnvelope","bndPass","hipass","volume","fxAmount","panner","setTone","setVolume","vol","setFXAmount","amount","setup","k","createGain","createBiquadFilter","type","frequency","value","Q","createStereoPanner","connect","destination","trigger","time","pan","Math","cos","forEach","ratio","osc","createOscillator","start","stop","gain","setValueAtTime","exponentialRampToValueAtTime"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n// import { Time } from \"tone\";\n\nexport class HiHat implements InstrumentEngine {\n    private ctx: AudioContext;\n    private ratios: number[];\n    public tone: number;\n    public decay: number;\n    private oscEnvelope!: GainNode;\n    private bndPass!: BiquadFilterNode;\n    private hipass!: BiquadFilterNode;\n    public volume: number;\n    public fxAmount: number;\n    private panner!: StereoPannerNode;\n\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    setup() {\n        const k = this.fxAmount / 100;\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = \"bandpass\";\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.panner = this.ctx.createStereoPanner();\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.panner);\n        this.panner.connect(this.ctx.destination);\n    }\n\n    trigger(time) {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        this.panner.pan.value = (Math.cos(time * 4) * this.fxAmount) / 100;\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            1 * this.volume,\n            time + 0.067 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.3 * this.volume,\n            time + 0.1 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.00001 * this.volume,\n            time + this.decay\n        );\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    };\n\n    setFXAmount = (amount: number) => {\n        this.fxAmount = amount;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}