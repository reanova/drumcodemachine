{"ast":null,"code":"/* eslint-disable eqeqeq */\nexport class Kick {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.osc = void 0;\n    this.gain = void 0;\n    this.volume = void 0;\n    this.distortion = void 0;\n    this.fxAmount = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = amount;\n    };\n\n    this.ctx = ctx;\n    this.tone = 167.1;\n    this.decay = 0.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  makeDistortionCurve(amount) {\n    var k = amount / 4,\n        n_samples = 44100,\n        curve = new Float32Array(n_samples),\n        deg = Math.PI / 180,\n        i = 0,\n        x;\n\n    for (; i < n_samples; ++i) {\n      x = i * 2 / n_samples - 1;\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n    }\n\n    return curve;\n  }\n\n  setup() {\n    this.osc = this.ctx.createOscillator();\n    this.osc.type = \"sine\";\n    this.gain = this.ctx.createGain();\n    this.distortion = this.ctx.createWaveShaper();\n    this.distortion.curve = this.makeDistortionCurve(this.fxAmount);\n    this.osc.connect(this.gain);\n    this.gain.connect(this.distortion);\n    this.distortion.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n\n    this.setup();\n    this.osc.frequency.setValueAtTime(this.tone, time + 0.001);\n    this.gain.gain.linearRampToValueAtTime(this.volume, time + 0.1);\n    this.osc.frequency.exponentialRampToValueAtTime(1, time + this.decay);\n    this.gain.gain.exponentialRampToValueAtTime(0.01 * this.volume, time + this.decay);\n    this.gain.gain.linearRampToValueAtTime(0, time + this.decay + 0.1);\n    this.osc.start(time);\n    this.osc.stop(time + this.decay + 0.1);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/SPICED/testfinal/my-app/src/engines/kick.ts"],"names":["Kick","constructor","ctx","tone","decay","osc","gain","volume","distortion","fxAmount","setTone","setVolume","vol","setFXAmount","amount","makeDistortionCurve","k","n_samples","curve","Float32Array","deg","Math","PI","i","x","abs","setup","createOscillator","type","createGain","createWaveShaper","connect","destination","trigger","time","frequency","setValueAtTime","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n\nexport class Kick implements InstrumentEngine {\n    private ctx: AudioContext;\n    public tone: number;\n    public decay: number;\n    private osc!: OscillatorNode;\n    private gain!: GainNode;\n    public volume: number;\n    private distortion!: WaveShaperNode;\n    public fxAmount: number;\n\n    constructor(ctx: AudioContext) {\n        this.ctx = ctx;\n        this.tone = 167.1;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    makeDistortionCurve(amount) {\n        var k = amount / 4,\n            n_samples = 44100,\n            curve = new Float32Array(n_samples),\n            deg = Math.PI / 180,\n            i = 0,\n            x;\n        for (; i < n_samples; ++i) {\n            x = (i * 2) / n_samples - 1;\n            curve[i] = ((3 + k) * x * 20 * deg) / (Math.PI + k * Math.abs(x));\n        }\n        return curve;\n    }\n\n    setup() {\n        this.osc = this.ctx.createOscillator();\n        this.osc.type = \"sine\";\n        this.gain = this.ctx.createGain();\n        this.distortion = this.ctx.createWaveShaper();\n        this.distortion.curve = this.makeDistortionCurve(this.fxAmount);\n\n        this.osc.connect(this.gain);\n        this.gain.connect(this.distortion);\n        this.distortion.connect(this.ctx.destination);\n    }\n\n    trigger(time: number) {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n\n        this.osc.frequency.setValueAtTime(this.tone, time + 0.001);\n        this.gain.gain.linearRampToValueAtTime(this.volume, time + 0.1);\n\n        this.osc.frequency.exponentialRampToValueAtTime(1, time + this.decay);\n        this.gain.gain.exponentialRampToValueAtTime(\n            0.01 * this.volume,\n            time + this.decay\n        );\n        this.gain.gain.linearRampToValueAtTime(0, time + this.decay + 0.1);\n\n        this.osc.start(time);\n\n        this.osc.stop(time + this.decay + 0.1);\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    };\n\n    setFXAmount = (amount: number) => {\n        this.fxAmount = amount;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}