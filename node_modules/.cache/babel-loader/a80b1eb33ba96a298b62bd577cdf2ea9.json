{"ast":null,"code":"var _jsxFileName = \"/Users/reanova/Desktop/testfinal/my-app/src/components/instrument.tsx\";\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-useless-constructor */\nimport * as React from \"react\";\nimport { Transport, Time } from \"tone\";\nimport { Clap } from \"../engines/clap\";\nimport { Slider } from \"./slider\";\nimport { HiHat } from \"../engines/hat\";\nimport { Kick } from \"../engines/kick\";\nimport { Snare } from \"../engines/snare\"; // import * as Tone from \"tone\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Instrument extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ctx = void 0;\n    this.sound = void 0;\n    this.loopId = void 0;\n\n    this.createLoop = () => {\n      if (!this.props.steps) {\n        return;\n      }\n\n      Transport.clear(this.loopId);\n\n      const loop = time => {\n        this.state.steps.forEach((s, i) => {\n          if (s) {\n            this.sound.trigger(time + i * Time(\"16n\").toSeconds());\n          }\n        });\n      };\n\n      this.loopId = Transport.schedule(loop, \"0\");\n    };\n\n    this.handleClick = () => {\n      // this.ctx.resume();\n      // if (this.ctx.state === \"running\") {\n      //     this.ctx.suspend();\n      // } else if (this.ctx.state === \"suspended\") {\n      //     this.ctx.resume();\n      // }\n      // Transport.start();\n      if (this.props.handleClick) this.props.handleClick(this.props.engine, this.state.steps.slice(0));\n    };\n\n    this.handleVolume = volume => {\n      this.sound.setVolume(volume);\n      this.setState({\n        volume\n      });\n    };\n\n    this.handleTone = tone => {\n      this.sound.setTone(tone);\n      this.setState({\n        tone\n      });\n    };\n\n    this.handleFX = fxAmount => {\n      this.sound.setFXAmount(fxAmount);\n      this.setState({\n        fxAmount\n      });\n    };\n\n    this.ctx = new AudioContext();\n\n    switch (props.engine) {\n      case \"Kick\":\n        this.sound = new Kick(this.ctx);\n        break;\n\n      case \"Snare\":\n        this.sound = new Snare(this.ctx);\n        break;\n\n      case \"HiHat\":\n        this.sound = new HiHat(this.ctx);\n        break;\n\n      case \"Clap\":\n        this.sound = new Clap(this.ctx);\n        break;\n    }\n\n    this.state = {\n      steps: [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false],\n      volume: 1,\n      tone: 130,\n      fxAmount: 0\n    };\n    this.loopId = 0;\n    Transport.bpm.value = 120;\n  } // Tone.Transport.bpm.value = 120;\n  // Tone.Transport.schedule(this.startLoop, \"0\");\n  // Tone.Transport.loop = true;\n  // Tone.Transport.loopEnd = \"1m\";\n\n\n  componentDidUpdate() {\n    if (this.props.steps && !areEqual(this.props.steps, this.state.steps)) {\n      this.setState({\n        steps: this.props.steps.slice(0)\n      });\n      this.createLoop();\n    }\n  } // public startLoop = (time: number) => {\n  //     console.log(\"start loop\", time);\n  //     this.kick.trigger(time);\n  //     this.kick.trigger(time + 0.5);\n  //     this.kick.trigger(time + 1);\n  //     this.kick.trigger(time + 1.5);\n  // }\n\n\n  render() {\n    const InstrumentStyle = {\n      height: \"3em\",\n      margin: \"0.2em\",\n      borderRadius: 10,\n      padding: 5,\n      backgroundColor: this.props.selected ? \"#2AC7DC\" : \"#696969\",\n      color: \"white\",\n      boxShadow: \"2px 2px 5px #222\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"inline-block\",\n        width: \"10em\",\n        alignContent: \"center\",\n        padding: \"2em\",\n        backgroundColor: \"#6F7D7A\",\n        border: \"#57615F 1px solid\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          label: this.props.engine + \" Tone\",\n          onValueChange: this.handleTone,\n          value: this.state.tone,\n          min: 10,\n          max: 1000\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          label: this.props.engine + \" Volume\",\n          onValueChange: this.handleVolume,\n          value: this.state.volume,\n          min: 0,\n          max: 1,\n          step: 0.05\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Slider, {\n          label: this.props.engine + \" FX\",\n          onValueChange: this.handleFX,\n          value: this.state.fxAmount,\n          min: 0,\n          max: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: InstrumentStyle,\n        onClick: this.handleClick,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.props.engine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport const areEqual = (ar1, ar2) => {\n  if (ar1.length !== ar2.length) return false;\n  let equal = true;\n  ar1.forEach((el, idx) => {\n    if (el !== ar2[idx]) equal = false;\n  });\n  return equal;\n};","map":{"version":3,"sources":["/Users/reanova/Desktop/testfinal/my-app/src/components/instrument.tsx"],"names":["React","Transport","Time","Clap","Slider","HiHat","Kick","Snare","Instrument","Component","constructor","props","ctx","sound","loopId","createLoop","steps","clear","loop","time","state","forEach","s","i","trigger","toSeconds","schedule","handleClick","engine","slice","handleVolume","volume","setVolume","setState","handleTone","tone","setTone","handleFX","fxAmount","setFXAmount","AudioContext","bpm","value","componentDidUpdate","areEqual","render","InstrumentStyle","height","margin","borderRadius","padding","backgroundColor","selected","color","boxShadow","display","width","alignContent","border","ar1","ar2","length","equal","el","idx"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-useless-constructor */\nimport * as React from \"react\";\nimport { Transport, Time } from \"tone\";\nimport { Clap } from \"../engines/clap\";\nimport { Instruments } from \"./instrument-hack\";\nimport { Slider } from \"./slider\";\nimport { HiHat } from \"../engines/hat\";\nimport { Kick } from \"../engines/kick\";\nimport { Snare } from \"../engines/snare\";\n\n// import * as Tone from \"tone\";\n\nexport interface InstrumentProps {\n    engine: string;\n    steps?: boolean[];\n    handleClick?: (engine: string, steps: boolean[]) => void;\n    selected?: boolean;\n}\n\nexport class Instrument extends React.Component<InstrumentProps, any> {\n    private ctx: AudioContext;\n    private sound: any;\n    private loopId!: number;\n\n    constructor(props: any) {\n        super(props);\n        this.ctx = new AudioContext();\n        switch (props.engine) {\n            case \"Kick\":\n                this.sound = new Kick(this.ctx);\n                break;\n            case \"Snare\":\n                this.sound = new Snare(this.ctx);\n                break;\n            case \"HiHat\":\n                this.sound = new HiHat(this.ctx);\n                break;\n            case \"Clap\":\n                this.sound = new Clap(this.ctx);\n                break;\n        }\n        this.state = {\n            steps: [\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n                false,\n            ],\n            volume: 1,\n            tone: 130,\n            fxAmount: 0,\n        };\n        this.loopId = 0;\n        Transport.bpm.value = 120;\n    }\n\n    // Tone.Transport.bpm.value = 120;\n    // Tone.Transport.schedule(this.startLoop, \"0\");\n\n    // Tone.Transport.loop = true;\n    // Tone.Transport.loopEnd = \"1m\";\n\n    componentDidUpdate() {\n        if (this.props.steps && !areEqual(this.props.steps, this.state.steps)) {\n            this.setState({\n                steps: this.props.steps.slice(0),\n            });\n            this.createLoop();\n        }\n    }\n\n    // public startLoop = (time: number) => {\n    //     console.log(\"start loop\", time);\n    //     this.kick.trigger(time);\n    //     this.kick.trigger(time + 0.5);\n    //     this.kick.trigger(time + 1);\n    //     this.kick.trigger(time + 1.5);\n    // }\n\n    createLoop = () => {\n        if (!this.props.steps) {\n            return;\n        }\n        Transport.clear(this.loopId);\n        const loop = (time: number) => {\n            this.state.steps.forEach((s, i) => {\n                if (s) {\n                    this.sound.trigger(time + i * Time(\"16n\").toSeconds());\n                }\n            });\n        };\n        this.loopId = Transport.schedule(loop, \"0\");\n    };\n\n    handleClick = () => {\n        // this.ctx.resume();\n        // if (this.ctx.state === \"running\") {\n        //     this.ctx.suspend();\n        // } else if (this.ctx.state === \"suspended\") {\n        //     this.ctx.resume();\n        // }\n        // Transport.start();\n        if (this.props.handleClick)\n            this.props.handleClick(\n                this.props.engine,\n                this.state.steps.slice(0)\n            );\n    };\n\n    handleVolume = (volume: number) => {\n        this.sound.setVolume(volume);\n        this.setState({ volume });\n    };\n\n    handleTone = (tone: number) => {\n        this.sound.setTone(tone);\n        this.setState({ tone });\n    };\n\n    handleFX = (fxAmount: number) => {\n        this.sound.setFXAmount(fxAmount);\n        this.setState({ fxAmount });\n    };\n\n    render() {\n        const InstrumentStyle = {\n            height: \"3em\",\n            margin: \"0.2em\",\n            borderRadius: 10,\n            padding: 5,\n            backgroundColor: this.props.selected ? \"#2AC7DC\" : \"#696969\",\n            color: \"white\",\n            boxShadow: \"2px 2px 5px #222\",\n        };\n        return (\n            <div\n                style={{\n                    display: \"inline-block\",\n                    width: \"10em\",\n                    alignContent: \"center\",\n                    padding: \"2em\",\n                    backgroundColor: \"#6F7D7A\",\n                    border: \"#57615F 1px solid\",\n                }}\n            >\n                <div>\n                    <Slider\n                        label={this.props.engine + \" Tone\"}\n                        onValueChange={this.handleTone}\n                        value={this.state.tone}\n                        min={10}\n                        max={1000}\n                    />\n                </div>\n                <div>\n                    <Slider\n                        label={this.props.engine + \" Volume\"}\n                        onValueChange={this.handleVolume}\n                        value={this.state.volume}\n                        min={0}\n                        max={1}\n                        step={0.05}\n                    />\n                </div>\n                <div>\n                    <Slider\n                        label={this.props.engine + \" FX\"}\n                        onValueChange={this.handleFX}\n                        value={this.state.fxAmount}\n                        min={0}\n                        max={100}\n                    />\n                </div>\n\n                <div style={InstrumentStyle} onClick={this.handleClick}>\n                    <p>{this.props.engine}</p>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport const areEqual = (ar1, ar2) => {\n    if (ar1.length !== ar2.length) return false;\n    let equal = true;\n    ar1.forEach((el, idx) => {\n        if (el !== ar2[idx]) equal = false;\n    });\n    return equal;\n};\n"]},"metadata":{},"sourceType":"module"}