{"ast":null,"code":"/* eslint-disable eqeqeq */\nexport class HiHat {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.ratios = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.oscEnvelope = void 0;\n    this.bndPass = void 0;\n    this.hipass = void 0;\n    this.volume = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.ctx = ctx;\n    this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 0.5;\n    this.volume = 1;\n  }\n\n  setup() {\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = \"bandpass\";\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n\n    this.setup();\n    this.ratios.forEach(ratio => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\";\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/testfinal/my-app/src/engines/hat.ts"],"names":["HiHat","constructor","ctx","ratios","tone","decay","oscEnvelope","bndPass","hipass","volume","setTone","setVolume","vol","setup","createGain","createBiquadFilter","type","frequency","value","Q","connect","destination","trigger","time","forEach","ratio","osc","createOscillator","start","stop","gain","setValueAtTime","exponentialRampToValueAtTime"],"mappings":"AAAA;AAGA,OAAO,MAAMA,KAAN,CAAwC;AAU3CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AAAA,SATTA,GASS;AAAA,SARTC,MAQS;AAAA,SAPVC,IAOU;AAAA,SANVC,KAMU;AAAA,SALTC,WAKS;AAAA,SAJTC,OAIS;AAAA,SAHTC,MAGS;AAAA,SAFVC,MAEU;;AAAA,SAmDjBC,OAnDiB,GAmDNN,IAAD,IAAkB;AACxB,WAAKA,IAAL,GAAYA,IAAZ;AACH,KArDgB;;AAAA,SAsDjBO,SAtDiB,GAsDJC,GAAD,IAAiB;AACzB,WAAKH,MAAL,GAAcG,GAAd;AACH,KAxDgB;;AACb,SAAKV,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAc,CAAC,CAAD,EAAI,KAAJ,EAAW,MAAX,EAAmB,MAAnB,EAA2B,MAA3B,EAAmC,MAAnC,CAAd;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKI,MAAL,GAAc,CAAd;AACH;;AAEDI,EAAAA,KAAK,GAAG;AACJ,SAAKP,WAAL,GAAmB,KAAKJ,GAAL,CAASY,UAAT,EAAnB;AACA,SAAKP,OAAL,GAAe,KAAKL,GAAL,CAASa,kBAAT,EAAf;AACA,SAAKR,OAAL,CAAaS,IAAb,GAAoB,UAApB;AACA,SAAKT,OAAL,CAAaU,SAAb,CAAuBC,KAAvB,GAA+B,KAA/B;AACA,SAAKX,OAAL,CAAaY,CAAb,CAAeD,KAAf,GAAuB,GAAvB;AACA,SAAKV,MAAL,GAAc,KAAKN,GAAL,CAASa,kBAAT,EAAd;AACA,SAAKP,MAAL,CAAYQ,IAAZ,GAAmB,UAAnB;AACA,SAAKR,MAAL,CAAYS,SAAZ,CAAsBC,KAAtB,GAA8B,IAA9B;AAEA,SAAKX,OAAL,CAAaa,OAAb,CAAqB,KAAKZ,MAA1B;AACA,SAAKA,MAAL,CAAYY,OAAZ,CAAoB,KAAKd,WAAzB;AACA,SAAKA,WAAL,CAAiBc,OAAjB,CAAyB,KAAKlB,GAAL,CAASmB,WAAlC;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAI,KAAKd,MAAL,IAAe,CAAnB,EAAsB;AAClB;AACH;;AACD,SAAKI,KAAL;AACA,SAAKV,MAAL,CAAYqB,OAAZ,CAAqBC,KAAD,IAAW;AAC3B,UAAIC,GAAG,GAAG,KAAKxB,GAAL,CAASyB,gBAAT,EAAV;AACAD,MAAAA,GAAG,CAACV,IAAJ,GAAW,QAAX;AACAU,MAAAA,GAAG,CAACT,SAAJ,CAAcC,KAAd,GAAsB,KAAKd,IAAL,GAAYqB,KAAlC;AACAC,MAAAA,GAAG,CAACN,OAAJ,CAAY,KAAKb,OAAjB;AACAmB,MAAAA,GAAG,CAACE,KAAJ,CAAUL,IAAV;AACAG,MAAAA,GAAG,CAACG,IAAJ,CAASN,IAAI,GAAG,KAAKlB,KAArB;AACH,KAPD;AAQA,SAAKC,WAAL,CAAiBwB,IAAjB,CAAsBC,cAAtB,CAAqC,UAAU,KAAKtB,MAApD,EAA4Dc,IAA5D;AACA,SAAKjB,WAAL,CAAiBwB,IAAjB,CAAsBE,4BAAtB,CACI,IAAI,KAAKvB,MADb,EAEIc,IAAI,GAAG,QAAQ,KAAKlB,KAFxB;AAIA,SAAKC,WAAL,CAAiBwB,IAAjB,CAAsBE,4BAAtB,CACI,MAAM,KAAKvB,MADf,EAEIc,IAAI,GAAG,MAAM,KAAKlB,KAFtB;AAIA,SAAKC,WAAL,CAAiBwB,IAAjB,CAAsBE,4BAAtB,CACI,UAAU,KAAKvB,MADnB,EAEIc,IAAI,GAAG,KAAKlB,KAFhB;AAIH;;AA3D0C","sourcesContent":["/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n\nexport class HiHat implements InstrumentEngine {\n    private ctx: AudioContext;\n    private ratios: number[];\n    public tone: number;\n    public decay: number;\n    private oscEnvelope!: GainNode;\n    private bndPass!: BiquadFilterNode;\n    private hipass!: BiquadFilterNode;\n    public volume: number;\n\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 0.5;\n        this.volume = 1;\n    }\n\n    setup() {\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = \"bandpass\";\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.ctx.destination);\n    }\n\n    trigger(time) {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            1 * this.volume,\n            time + 0.067 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.3 * this.volume,\n            time + 0.1 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.00001 * this.volume,\n            time + this.decay\n        );\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}