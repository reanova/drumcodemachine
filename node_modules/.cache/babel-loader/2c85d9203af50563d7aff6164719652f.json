{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable eqeqeq */\n// import { Time } from \"tone\";\nexport class HiHat {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.ratios = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.oscEnvelope = void 0;\n    this.bndPass = void 0;\n    this.hipass = void 0;\n    this.volume = void 0;\n    this.fxAmount = void 0;\n    this.panner = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = amount;\n    };\n\n    this.ctx = ctx;\n    this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n    this.tone = 130.81;\n    this.decay = 0.5;\n    this.volume = 1;\n    this.fxAmount = 0;\n  }\n\n  setup() {\n    const k = this.fxAmount / 100;\n    this.oscEnvelope = this.ctx.createGain();\n    this.bndPass = this.ctx.createBiquadFilter();\n    this.bndPass.type = \"bandpass\";\n    this.bndPass.frequency.value = 20000;\n    this.bndPass.Q.value = 0.2;\n    this.hipass = this.ctx.createBiquadFilter();\n    this.hipass.type = \"highpass\";\n    this.hipass.frequency.value = 5000;\n    this.panner = this.ctx.createStereoPanner();\n    this.bndPass.connect(this.hipass);\n    this.hipass.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.panner);\n    this.panner.connect(this.ctx.destination);\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n\n    this.setup();\n    const cos = [1, 0.9950041652780257, 0.9800665778412416, 0.955336489125606, 0.9210609940028851, 0.8775825618903728, 0.8253356149096783, 0.7648421872844885, 0.6967067093471655, 0.6216099682706645, 0.5403023058681398, 0.4535961214255775, 0.3623577544766736, 0.26749882862458735, 0.16996714290024081, 0.07073720166770268, -0.029199522301289037, -0.12884449429552508, -0.22720209469308753, -0.32328956686350396, -0.4161468365471428, -0.5048461045998579, -0.5885011172553463, -0.6662760212798248, -0.7373937155412461, -0.8011436155469343, -0.8568887533689478, -0.9040721420170617, -0.9422223406686585, -0.9709581651495908, -0.9899924966004456, -0.9991351502732795, -0.998294775794753, -0.9874797699088647, -0.9667981925794605, -0.9364566872907957, -0.8967584163341462, -0.8481000317104072, -0.7909677119144155, -0.7259323042001387, -0.6536436208636106, -0.5748239465332677, -0.49026082134069865, -0.4007991720799746, -0.30733286997841935, -0.2107957994307797, -0.11215252693505487, -0.012388663462891447, 0.08749898343944551, 0.18651236942257401, 0.2836621854632246, 0.37797774271297857, 0.4685166713003748, 0.5543743361791585, 0.6346928759426319, 0.7086697742912575, 0.7755658785102473, 0.8347127848391573, 0.8855195169413168, 0.9274784307440339, 0.9601702866503645, 0.9832684384425836, 0.9965420970232169];\n    this.panner.pan.value = Math.cos(time * 4) * this.fxAmount / 100;\n    this.ratios.forEach(ratio => {\n      var osc = this.ctx.createOscillator();\n      osc.type = \"square\";\n      osc.frequency.value = this.tone * ratio;\n      osc.connect(this.bndPass);\n      osc.start(time);\n      osc.stop(time + this.decay);\n    });\n    this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(1 * this.volume, time + 0.067 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.3 * this.volume, time + 0.1 * this.decay);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.00001 * this.volume, time + this.decay);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/SPICED/testfinal/my-app/src/engines/hat.ts"],"names":["HiHat","constructor","ctx","ratios","tone","decay","oscEnvelope","bndPass","hipass","volume","fxAmount","panner","setTone","setVolume","vol","setFXAmount","amount","setup","k","createGain","createBiquadFilter","type","frequency","value","Q","createStereoPanner","connect","destination","trigger","time","cos","pan","Math","forEach","ratio","osc","createOscillator","start","stop","gain","setValueAtTime","exponentialRampToValueAtTime"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n// import { Time } from \"tone\";\n\nexport class HiHat implements InstrumentEngine {\n    private ctx: AudioContext;\n    private ratios: number[];\n    public tone: number;\n    public decay: number;\n    private oscEnvelope!: GainNode;\n    private bndPass!: BiquadFilterNode;\n    private hipass!: BiquadFilterNode;\n    public volume: number;\n    public fxAmount: number;\n    private panner!: StereoPannerNode;\n\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.ratios = [1, 1.342, 1.2312, 1.6532, 1.9523, 2.1523];\n        this.tone = 130.81;\n        this.decay = 0.5;\n        this.volume = 1;\n        this.fxAmount = 0;\n    }\n\n    setup() {\n        const k = this.fxAmount / 100;\n        this.oscEnvelope = this.ctx.createGain();\n        this.bndPass = this.ctx.createBiquadFilter();\n        this.bndPass.type = \"bandpass\";\n        this.bndPass.frequency.value = 20000;\n        this.bndPass.Q.value = 0.2;\n        this.hipass = this.ctx.createBiquadFilter();\n        this.hipass.type = \"highpass\";\n        this.hipass.frequency.value = 5000;\n        this.panner = this.ctx.createStereoPanner();\n\n        this.bndPass.connect(this.hipass);\n        this.hipass.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.panner);\n        this.panner.connect(this.ctx.destination);\n    }\n\n    trigger(time) {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        const cos = [\n            1,\n            0.9950041652780257,\n            0.9800665778412416,\n            0.955336489125606,\n            0.9210609940028851,\n            0.8775825618903728,\n            0.8253356149096783,\n            0.7648421872844885,\n            0.6967067093471655,\n            0.6216099682706645,\n            0.5403023058681398,\n            0.4535961214255775,\n            0.3623577544766736,\n            0.26749882862458735,\n            0.16996714290024081,\n            0.07073720166770268,\n            -0.029199522301289037,\n            -0.12884449429552508,\n            -0.22720209469308753,\n            -0.32328956686350396,\n            -0.4161468365471428,\n            -0.5048461045998579,\n            -0.5885011172553463,\n            -0.6662760212798248,\n            -0.7373937155412461,\n            -0.8011436155469343,\n            -0.8568887533689478,\n            -0.9040721420170617,\n            -0.9422223406686585,\n            -0.9709581651495908,\n            -0.9899924966004456,\n            -0.9991351502732795,\n            -0.998294775794753,\n            -0.9874797699088647,\n            -0.9667981925794605,\n            -0.9364566872907957,\n            -0.8967584163341462,\n            -0.8481000317104072,\n            -0.7909677119144155,\n            -0.7259323042001387,\n            -0.6536436208636106,\n            -0.5748239465332677,\n            -0.49026082134069865,\n            -0.4007991720799746,\n            -0.30733286997841935,\n            -0.2107957994307797,\n            -0.11215252693505487,\n            -0.012388663462891447,\n            0.08749898343944551,\n            0.18651236942257401,\n            0.2836621854632246,\n            0.37797774271297857,\n            0.4685166713003748,\n            0.5543743361791585,\n            0.6346928759426319,\n            0.7086697742912575,\n            0.7755658785102473,\n            0.8347127848391573,\n            0.8855195169413168,\n            0.9274784307440339,\n            0.9601702866503645,\n            0.9832684384425836,\n            0.9965420970232169,\n        ];\n\n        this.panner.pan.value = (Math.cos(time * 4) * this.fxAmount) / 100;\n        this.ratios.forEach((ratio) => {\n            var osc = this.ctx.createOscillator();\n            osc.type = \"square\";\n            osc.frequency.value = this.tone * ratio;\n            osc.connect(this.bndPass);\n            osc.start(time);\n            osc.stop(time + this.decay);\n        });\n        this.oscEnvelope.gain.setValueAtTime(0.00001 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            1 * this.volume,\n            time + 0.067 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.3 * this.volume,\n            time + 0.1 * this.decay\n        );\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.00001 * this.volume,\n            time + this.decay\n        );\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    };\n\n    setFXAmount = (amount: number) => {\n        this.fxAmount = amount;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}