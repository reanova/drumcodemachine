{"ast":null,"code":"/* eslint-disable eqeqeq */\nexport class Snare {\n  constructor(ctx) {\n    this.ctx = void 0;\n    this.tone = void 0;\n    this.decay = void 0;\n    this.noise = void 0;\n    this.noiseEnvelope = void 0;\n    this.osc = void 0;\n    this.oscEnvelope = void 0;\n    this.volume = void 0;\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = vol => {\n      this.volume = vol;\n    };\n\n    this.ctx = ctx;\n    this.tone = 100;\n    this.decay = 0.2;\n    this.volume = 1;\n  }\n\n  setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n    var noiseFilter = this.ctx.createBiquadFilter();\n    noiseFilter.type = \"highpass\";\n    noiseFilter.frequency.value = 1000;\n    this.noise.connect(noiseFilter);\n    this.noiseEnvelope = this.ctx.createGain();\n    noiseFilter.connect(this.noiseEnvelope);\n    this.noiseEnvelope.connect(this.ctx.destination);\n    this.osc = this.ctx.createOscillator();\n    this.osc.type = \"triangle\";\n    this.oscEnvelope = this.ctx.createGain();\n    this.osc.connect(this.oscEnvelope);\n    this.oscEnvelope.connect(this.ctx.destination);\n  }\n\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    return buffer;\n  }\n\n  trigger(time) {\n    if (this.volume == 0) {\n      return;\n    }\n\n    this.setup();\n    this.noiseEnvelope.gain.setValueAtTime(this.volume, time);\n    this.noiseEnvelope.gain.exponentialRampToValueAtTime(0.01, time + this.decay);\n    this.noise.start(time);\n    this.osc.frequency.setValueAtTime(this.tone, time);\n    this.oscEnvelope.gain.setValueAtTime(0.7 * this.volume, time);\n    this.oscEnvelope.gain.exponentialRampToValueAtTime(0.01 * this.volume, time + this.decay / 2);\n    this.osc.start(time);\n    this.osc.stop(time + this.decay);\n    this.noise.stop(time + this.decay);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/testfinal/my-app/src/engines/snare.ts"],"names":["Snare","constructor","ctx","tone","decay","noise","noiseEnvelope","osc","oscEnvelope","volume","setTone","setVolume","vol","setup","createBufferSource","buffer","noiseBuffer","noiseFilter","createBiquadFilter","type","frequency","value","connect","createGain","destination","createOscillator","bufferSize","sampleRate","createBuffer","output","getChannelData","i","Math","random","trigger","time","gain","setValueAtTime","exponentialRampToValueAtTime","start","stop"],"mappings":"AAAA;AAGA,OAAO,MAAMA,KAAN,CAAwC;AAS3CC,EAAAA,WAAW,CAACC,GAAD,EAAM;AAAA,SARTA,GAQS;AAAA,SAPVC,IAOU;AAAA,SANVC,KAMU;AAAA,SALTC,KAKS;AAAA,SAJTC,aAIS;AAAA,SAHTC,GAGS;AAAA,SAFTC,WAES;AAAA,SADVC,MACU;;AAAA,SAiEjBC,OAjEiB,GAiENP,IAAD,IAAkB;AACxB,WAAKA,IAAL,GAAYA,IAAZ;AACH,KAnEgB;;AAAA,SAoEjBQ,SApEiB,GAoEJC,GAAD,IAAiB;AACzB,WAAKH,MAAL,GAAcG,GAAd;AACH,KAtEgB;;AACb,SAAKV,GAAL,GAAWA,GAAX;AACA,SAAKC,IAAL,GAAY,GAAZ;AACA,SAAKC,KAAL,GAAa,GAAb;AACA,SAAKK,MAAL,GAAc,CAAd;AACH;;AAEDI,EAAAA,KAAK,GAAG;AACJ,SAAKR,KAAL,GAAa,KAAKH,GAAL,CAASY,kBAAT,EAAb;AACA,SAAKT,KAAL,CAAWU,MAAX,GAAoB,KAAKC,WAAL,EAApB;AAEA,QAAIC,WAAW,GAAG,KAAKf,GAAL,CAASgB,kBAAT,EAAlB;AACAD,IAAAA,WAAW,CAACE,IAAZ,GAAmB,UAAnB;AACAF,IAAAA,WAAW,CAACG,SAAZ,CAAsBC,KAAtB,GAA8B,IAA9B;AACA,SAAKhB,KAAL,CAAWiB,OAAX,CAAmBL,WAAnB;AAEA,SAAKX,aAAL,GAAqB,KAAKJ,GAAL,CAASqB,UAAT,EAArB;AACAN,IAAAA,WAAW,CAACK,OAAZ,CAAoB,KAAKhB,aAAzB;AAEA,SAAKA,aAAL,CAAmBgB,OAAnB,CAA2B,KAAKpB,GAAL,CAASsB,WAApC;AAEA,SAAKjB,GAAL,GAAW,KAAKL,GAAL,CAASuB,gBAAT,EAAX;AACA,SAAKlB,GAAL,CAASY,IAAT,GAAgB,UAAhB;AAEA,SAAKX,WAAL,GAAmB,KAAKN,GAAL,CAASqB,UAAT,EAAnB;AACA,SAAKhB,GAAL,CAASe,OAAT,CAAiB,KAAKd,WAAtB;AACA,SAAKA,WAAL,CAAiBc,OAAjB,CAAyB,KAAKpB,GAAL,CAASsB,WAAlC;AACH;;AAEDR,EAAAA,WAAW,GAAG;AACV,QAAIU,UAAU,GAAG,KAAKxB,GAAL,CAASyB,UAA1B;AACA,QAAIZ,MAAM,GAAG,KAAKb,GAAL,CAAS0B,YAAT,CAAsB,CAAtB,EAAyBF,UAAzB,EAAqC,KAAKxB,GAAL,CAASyB,UAA9C,CAAb;AACA,QAAIE,MAAM,GAAGd,MAAM,CAACe,cAAP,CAAsB,CAAtB,CAAb;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,UAApB,EAAgCK,CAAC,EAAjC,EAAqC;AACjCF,MAAAA,MAAM,CAACE,CAAD,CAAN,GAAYC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAAhC;AACH;;AAED,WAAOlB,MAAP;AACH;;AAEDmB,EAAAA,OAAO,CAACC,IAAD,EAAe;AAClB,QAAI,KAAK1B,MAAL,IAAe,CAAnB,EAAsB;AAClB;AACH;;AACD,SAAKI,KAAL;AACA,SAAKP,aAAL,CAAmB8B,IAAnB,CAAwBC,cAAxB,CAAuC,KAAK5B,MAA5C,EAAoD0B,IAApD;AACA,SAAK7B,aAAL,CAAmB8B,IAAnB,CAAwBE,4BAAxB,CACI,IADJ,EAEIH,IAAI,GAAG,KAAK/B,KAFhB;AAIA,SAAKC,KAAL,CAAWkC,KAAX,CAAiBJ,IAAjB;AAEA,SAAK5B,GAAL,CAASa,SAAT,CAAmBiB,cAAnB,CAAkC,KAAKlC,IAAvC,EAA6CgC,IAA7C;AACA,SAAK3B,WAAL,CAAiB4B,IAAjB,CAAsBC,cAAtB,CAAqC,MAAM,KAAK5B,MAAhD,EAAwD0B,IAAxD;AACA,SAAK3B,WAAL,CAAiB4B,IAAjB,CAAsBE,4BAAtB,CACI,OAAO,KAAK7B,MADhB,EAEI0B,IAAI,GAAG,KAAK/B,KAAL,GAAa,CAFxB;AAIA,SAAKG,GAAL,CAASgC,KAAT,CAAeJ,IAAf;AAEA,SAAK5B,GAAL,CAASiC,IAAT,CAAcL,IAAI,GAAG,KAAK/B,KAA1B;AACA,SAAKC,KAAL,CAAWmC,IAAX,CAAgBL,IAAI,GAAG,KAAK/B,KAA5B;AACH;;AAxE0C","sourcesContent":["/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n\nexport class Snare implements InstrumentEngine {\n    private ctx: AudioContext;\n    public tone: number;\n    public decay: number;\n    private noise!: AudioBufferSourceNode;\n    private noiseEnvelope!: GainNode;\n    private osc!: OscillatorNode;\n    private oscEnvelope!: GainNode;\n    public volume: number;\n    constructor(ctx) {\n        this.ctx = ctx;\n        this.tone = 100;\n        this.decay = 0.2;\n        this.volume = 1;\n    }\n\n    setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n\n        var noiseFilter = this.ctx.createBiquadFilter();\n        noiseFilter.type = \"highpass\";\n        noiseFilter.frequency.value = 1000;\n        this.noise.connect(noiseFilter);\n\n        this.noiseEnvelope = this.ctx.createGain();\n        noiseFilter.connect(this.noiseEnvelope);\n\n        this.noiseEnvelope.connect(this.ctx.destination);\n\n        this.osc = this.ctx.createOscillator();\n        this.osc.type = \"triangle\";\n\n        this.oscEnvelope = this.ctx.createGain();\n        this.osc.connect(this.oscEnvelope);\n        this.oscEnvelope.connect(this.ctx.destination);\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n\n        return buffer;\n    }\n\n    trigger(time: number) {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        this.noiseEnvelope.gain.setValueAtTime(this.volume, time);\n        this.noiseEnvelope.gain.exponentialRampToValueAtTime(\n            0.01,\n            time + this.decay\n        );\n        this.noise.start(time);\n\n        this.osc.frequency.setValueAtTime(this.tone, time);\n        this.oscEnvelope.gain.setValueAtTime(0.7 * this.volume, time);\n        this.oscEnvelope.gain.exponentialRampToValueAtTime(\n            0.01 * this.volume,\n            time + this.decay / 2\n        );\n        this.osc.start(time);\n\n        this.osc.stop(time + this.decay);\n        this.noise.stop(time + this.decay);\n    }\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n    setVolume = (vol: number) => {\n        this.volume = vol;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}