{"ast":null,"code":"/* eslint-disable eqeqeq */\nexport class Clap {\n  constructor(ctx) {\n    this.tone = void 0;\n    this.volume = void 0;\n    this.decay = void 0;\n    this.pulseWidth = void 0;\n    this.noise = void 0;\n    this.ctx = void 0;\n    this.filter = void 0;\n    this.envelope = void 0;\n\n    this.trigger = time => {\n      if (this.volume == 0) {\n        return;\n      }\n\n      this.setup();\n      this.envelope.gain.setValueAtTime(this.volume, time);\n      this.envelope.gain.exponentialRampToValueAtTime(0.1, time + this.pulseWidth);\n      this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n      this.envelope.gain.exponentialRampToValueAtTime(0.1, time + 2 * this.pulseWidth);\n      this.envelope.gain.setValueAtTime(this.volume, time + 2 * this.pulseWidth);\n      this.envelope.gain.exponentialRampToValueAtTime(0.001, time + this.decay);\n      this.noise.start(time);\n      this.noise.stop(time + this.decay);\n    };\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = volume => {\n      this.volume = volume;\n    };\n\n    this.tone = 130;\n    this.volume = 1;\n    this.decay = 0.3;\n    this.pulseWidth = 0.025;\n    this.ctx = ctx;\n  }\n\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    return buffer;\n  }\n\n  setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n    this.filter = this.ctx.createBiquadFilter();\n    this.filter.type = \"bandpass\";\n    this.filter.frequency.value = this.tone * 2;\n    this.envelope = this.ctx.createGain();\n    this.noise.connect(this.filter);\n    this.filter.connect(this.envelope);\n    this.envelope.connect(this.ctx.destination);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/testfinal/my-app/src/engines/clap.ts"],"names":["Clap","constructor","ctx","tone","volume","decay","pulseWidth","noise","filter","envelope","trigger","time","setup","gain","setValueAtTime","exponentialRampToValueAtTime","start","stop","setTone","setVolume","noiseBuffer","bufferSize","sampleRate","buffer","createBuffer","output","getChannelData","i","Math","random","createBufferSource","createBiquadFilter","type","frequency","value","createGain","connect","destination"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\nimport { InstrumentEngine } from \"./engines\";\n\nexport class Clap implements InstrumentEngine {\n    public tone: number;\n    public volume: number;\n    public decay: number;\n    private pulseWidth: number;\n    private noise!: AudioBufferSourceNode;\n    private ctx: AudioContext;\n    private filter!: BiquadFilterNode;\n    private envelope!: GainNode;\n\n    constructor(ctx: AudioContext) {\n        this.tone = 130;\n        this.volume = 1;\n        this.decay = 0.3;\n        this.pulseWidth = 0.025;\n        this.ctx = ctx;\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n        return buffer;\n    }\n\n    setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        this.filter = this.ctx.createBiquadFilter();\n        this.filter.type = \"bandpass\";\n        this.filter.frequency.value = this.tone * 2;\n        this.envelope = this.ctx.createGain();\n\n        this.noise.connect(this.filter);\n        this.filter.connect(this.envelope);\n\n        this.envelope.connect(this.ctx.destination);\n    }\n\n    trigger = (time: number) => {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        this.envelope.gain.setValueAtTime(this.volume, time);\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.1,\n            time + this.pulseWidth\n        );\n\n        this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.1,\n            time + 2 * this.pulseWidth\n        );\n\n        this.envelope.gain.setValueAtTime(\n            this.volume,\n            time + 2 * this.pulseWidth\n        );\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.001,\n            time + this.decay\n        );\n\n        this.noise.start(time);\n        this.noise.stop(time + this.decay);\n    };\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n\n    setVolume = (volume: number) => {\n        this.volume = volume;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}