{"ast":null,"code":"/* eslint-disable eqeqeq */\nimport { Time } from \"tone\";\nexport class Clap {\n  constructor(ctx) {\n    this.tone = void 0;\n    this.volume = void 0;\n    this.decay = void 0;\n    this.pulseWidth = void 0;\n    this.noise = void 0;\n    this.ctx = void 0;\n    this.filter = void 0;\n    this.envelope = void 0;\n    this.fxAmount = void 0;\n    this.feedback = void 0;\n    this.echo = void 0;\n\n    this.trigger = time => {\n      if (this.volume == 0) {\n        return;\n      }\n\n      this.setup();\n      this.envelope.gain.setValueAtTime(this.volume, time);\n      this.envelope.gain.exponentialRampToValueAtTime(0.1, time + this.pulseWidth);\n      this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n      this.envelope.gain.exponentialRampToValueAtTime(0.1, time + 2 * this.pulseWidth);\n      this.envelope.gain.setValueAtTime(this.volume, time + 2 * this.pulseWidth);\n      this.envelope.gain.exponentialRampToValueAtTime(0.001, time + this.decay);\n      this.noise.start(time);\n      this.noise.stop(time + this.decay);\n    };\n\n    this.setTone = tone => {\n      this.tone = tone;\n    };\n\n    this.setVolume = volume => {\n      this.volume = volume;\n    };\n\n    this.setFXAmount = amount => {\n      this.fxAmount = amount;\n    };\n\n    this.tone = 130;\n    this.volume = 1;\n    this.decay = 0.3;\n    this.pulseWidth = 0.025;\n    this.ctx = ctx;\n    this.fxAmount = 0;\n  }\n\n  noiseBuffer() {\n    var bufferSize = this.ctx.sampleRate;\n    var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n    var output = buffer.getChannelData(0);\n\n    for (var i = 0; i < bufferSize; i++) {\n      output[i] = Math.random() * 2 - 1;\n    }\n\n    return buffer;\n  }\n\n  setup() {\n    this.noise = this.ctx.createBufferSource();\n    this.noise.buffer = this.noiseBuffer();\n    this.filter = this.ctx.createBiquadFilter();\n    this.filter.type = \"bandpass\";\n    this.filter.frequency.value = this.tone * 2;\n    this.envelope = this.ctx.createGain();\n    this.feedback = this.ctx.createGain();\n    this.echo = this.ctx.createDelay();\n    this.echo.delayTime.value = Time(\"6n\").toSeconds();\n    this.feedback.gain.value = 0.99 * this.fxAmount / 100;\n    this.noise.connect(this.filter);\n    this.filter.connect(this.envelope);\n    this.envelope.connect(this.echo);\n    this.echo.connect(this.feedback);\n    this.feedback.connect(this.echo);\n    this.feedback.connect(this.ctx.destination);\n    this.envelope.connect(this.ctx.destination);\n  }\n\n}","map":{"version":3,"sources":["/Users/reanova/Desktop/codingportfolio/learning-projects/finalproject-drummachine/my-app/src/engines/clap.ts"],"names":["Time","Clap","constructor","ctx","tone","volume","decay","pulseWidth","noise","filter","envelope","fxAmount","feedback","echo","trigger","time","setup","gain","setValueAtTime","exponentialRampToValueAtTime","start","stop","setTone","setVolume","setFXAmount","amount","noiseBuffer","bufferSize","sampleRate","buffer","createBuffer","output","getChannelData","i","Math","random","createBufferSource","createBiquadFilter","type","frequency","value","createGain","createDelay","delayTime","toSeconds","connect","destination"],"mappings":"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","sourcesContent":["/* eslint-disable eqeqeq */\nimport { Time } from \"tone\";\nimport { InstrumentEngine } from \"./engines\";\n\nexport class Clap implements InstrumentEngine {\n    public tone: number;\n    public volume: number;\n    public decay: number;\n    private pulseWidth: number;\n    private noise!: AudioBufferSourceNode;\n    private ctx: AudioContext;\n    private filter!: BiquadFilterNode;\n    private envelope!: GainNode;\n    public fxAmount: number;\n    private feedback!: GainNode;\n    private echo!: DelayNode;\n\n    constructor(ctx: AudioContext) {\n        this.tone = 130;\n        this.volume = 1;\n        this.decay = 0.3;\n        this.pulseWidth = 0.025;\n        this.ctx = ctx;\n        this.fxAmount = 0;\n    }\n\n    noiseBuffer() {\n        var bufferSize = this.ctx.sampleRate;\n        var buffer = this.ctx.createBuffer(1, bufferSize, this.ctx.sampleRate);\n        var output = buffer.getChannelData(0);\n\n        for (var i = 0; i < bufferSize; i++) {\n            output[i] = Math.random() * 2 - 1;\n        }\n        return buffer;\n    }\n\n    setup() {\n        this.noise = this.ctx.createBufferSource();\n        this.noise.buffer = this.noiseBuffer();\n        this.filter = this.ctx.createBiquadFilter();\n        this.filter.type = \"bandpass\";\n        this.filter.frequency.value = this.tone * 2;\n        this.envelope = this.ctx.createGain();\n        this.feedback = this.ctx.createGain();\n        this.echo = this.ctx.createDelay();\n        this.echo.delayTime.value = Time(\"6n\").toSeconds();\n        this.feedback.gain.value = (0.99 * this.fxAmount) / 100;\n\n        this.noise.connect(this.filter);\n        this.filter.connect(this.envelope);\n\n        this.envelope.connect(this.echo);\n        this.echo.connect(this.feedback);\n        this.feedback.connect(this.echo);\n        this.feedback.connect(this.ctx.destination);\n        this.envelope.connect(this.ctx.destination);\n    }\n\n    trigger = (time: number) => {\n        if (this.volume == 0) {\n            return;\n        }\n        this.setup();\n        this.envelope.gain.setValueAtTime(this.volume, time);\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.1,\n            time + this.pulseWidth\n        );\n\n        this.envelope.gain.setValueAtTime(this.volume, time + this.pulseWidth);\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.1,\n            time + 2 * this.pulseWidth\n        );\n\n        this.envelope.gain.setValueAtTime(\n            this.volume,\n            time + 2 * this.pulseWidth\n        );\n        this.envelope.gain.exponentialRampToValueAtTime(\n            0.001,\n            time + this.decay\n        );\n\n        this.noise.start(time);\n        this.noise.stop(time + this.decay);\n    };\n\n    setTone = (tone: number) => {\n        this.tone = tone;\n    };\n\n    setVolume = (volume: number) => {\n        this.volume = volume;\n    };\n\n    setFXAmount = (amount: number) => {\n        this.fxAmount = amount;\n    };\n}\n"]},"metadata":{},"sourceType":"module"}